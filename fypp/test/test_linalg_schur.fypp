#:include "common.fypp"
! Test Schur form
module test_linalg_schur
    use stdlib_linalg_interface

    implicit none (type,external)

    contains

    !> SVD tests
    subroutine test_schur(error)
        logical, intent(out) :: error

        real :: t0,t1

        call cpu_time(t0)

        #:for rk,rt,ri in ALL_KINDS_TYPES
        call test_schur_api_${ri}$(error)
        if (error) return
        #:if rt.startswith('real')
        call test_schur_${ri}$(error)
        #:endif
        #: endfor

        call cpu_time(t1)

        print 1, 1000*(t1-t0), merge('SUCCESS','ERROR  ',.not.error)

        1 format('Schur tests completed in ',f9.4,' milliseconds, result=',a)

    end subroutine test_schur

    !> QR factorization of a random matrix
    #:for rk,rt,ri in ALL_KINDS_TYPES
    subroutine test_schur_api_${ri}$(error)
        logical,intent(out) :: error

        integer(ilp), parameter :: n   = 15_ilp
        integer(ilp) :: lwork
        real(${rk}$), parameter :: tol = 10*sqrt(epsilon(0.0_${rk}$))
        complex(${rk}$) :: eigs(n)
        ${rt}$, dimension(n,n) :: a,t,z
        ${rt}$, allocatable :: storage(:)
        #:if 'complex' in rt
        real(${rk}$) :: rea(n,n),ima(n,n)
        #:endif
        type(linalg_state) :: err
        
        #:if 'complex' in rt
        call random_number(rea)
        call random_number(ima)
        a = cmplx(rea,ima,kind=${rk}$)
        #:else
        call random_number(a)
        #:endif
        
        ! Test simple API
        call schur(a,t,err=err)
        error = err%error(); if (error) return
        
        ! Test output transformation matrix
        call schur(a,t,z,err=err)
        error = err%error(); if (error) return

        ! Test output eigenvalues
        call schur(a,t,eigvals=eigs,err=err)
        error = err%error(); if (error) return
        
        ! Test storage query
        call schur_space(a,lwork,err=err)
        error = err%error(); if (error) return
        
        ! Test with user-defined storage
        allocate(storage(lwork))        
        call schur(a,t,eigvals=eigs,storage=storage,err=err)
        error = err%error(); if (error) return        
        
    end subroutine test_schur_api_${ri}$
    
    #:if rt.startswith('real')
    subroutine test_schur_${ri}$(error)
        logical,intent(out) :: error

        integer(ilp), parameter :: n = 3_ilp
        
        ${rt}$, dimension(n,n) :: a,t,z
        type(linalg_state) :: err
        
        a = transpose(reshape([[ 2.65896708,  1.42440458, -1.92933439],&
                               [ 0.        , -0.32948354, -0.49063704],&
                               [ 0.        ,  1.31178921, -0.32948354]],[n,n]))
        
        ! Run schur
        call schur(a,t,z,err=err)
        error = err%error(); if (error) return
        
        print "(3(1x,g0.12))", transpose(t)
        print "(3(1x,g0.12))", transpose(z)
        
    end subroutine test_schur_${ri}$
    
    #:endif
    
    #:endfor

!import numpy as np
!from scipy.linalg import schur, eigvals
!A = np.array([[0, 2, 2], [0, 1, 2], [1, 0, 1]])
!T, Z = schur(A)
!T
!array([
!Z
!array([[0.72711591, -0.60156188, 0.33079564],
!       [0.52839428, 0.79801892, 0.28976765],
!       [0.43829436, 0.03590414, -0.89811411]])


end module test_linalg_schur


