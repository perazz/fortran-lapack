#:include "common.fypp"
! Test eigendecomposition
module test_linalg_eig
    use linear_algebra

    implicit none (type,external)

    contains

    !> SVD tests
    subroutine test_eig(error)
        logical, intent(out) :: error

        real :: t0,t1

        call cpu_time(t0)

        #:for rk,rt,ri in REAL_KINDS_TYPES
        call test_eig_real_${ri}$(error)
        if (error) return
        #: endfor
        

        #:for rk,rt,ri in REAL_KINDS_TYPES
        call test_eigh_real_${ri}$(error)
        if (error) return
        #: endfor
                
        
        #:for ck,ct,ci in CMPL_KINDS_TYPES
        call test_eig_complex_${ci}$(error)
        if (error) return    
        #: endfor 

        call cpu_time(t1)

        print 1, 1000*(t1-t0), merge('SUCCESS','ERROR  ',.not.error)

        1 format('Eigenproblem tests completed in ',f9.4,' milliseconds, result=',a)

    end subroutine test_eig

    !> Simple real matrix eigenvalues
    #:for rk,rt,ri in REAL_KINDS_TYPES
    subroutine test_eig_real_${ri}$(error)
        logical,intent(out) :: error

        !> Reference solution
        real(${rk}$), parameter :: zero    = 0.0_${rk}$
        real(${rk}$), parameter :: two     = 2.0_${rk}$
        real(${rk}$), parameter :: sqrt2o2 = sqrt(two)*0.5_${rk}$
        real(${rk}$), parameter :: tol     = sqrt(epsilon(zero))

        !> Local variables
        type(la_state) :: state
        ${rt}$ :: A(3,3),B(2,2)
        complex(${rk}$) :: lambda(3),Bvec(2,2),Bres(2,2)

        !> Matrix with real eigenvalues
        A = reshape([1,0,0, &
                     0,2,0, &
                     0,0,3],[3,3])
        
        call eig(A,lambda,err=state)
        error = state%error() .or. &
                .not. all(aimag(lambda)==zero .and. real(lambda,kind=${rk}$)==[1,2,3])
        if (error) return
        
        !> Matrix with complex eigenvalues
        B = transpose(reshape([1, -1, &
                               1,  1],[2,2]))
                               
        !> Expected right eigenvectors
        Bres(1,1:2) = sqrt2o2
        Bres(2,1)   = cmplx(zero,-sqrt2o2,kind=${rk}$)
        Bres(2,2)   = cmplx(zero,+sqrt2o2,kind=${rk}$)
        
        call eig(B,lambda,right=Bvec,err=state)
        error = state%error() .or. any(abs(Bres-Bvec)>tol)
        
        print *, bvec(1,:)
        print *, bvec(2,:) 
        print *, bres 
        
        if (error) return       
        
    end subroutine test_eig_real_${ri}$

    ! Symmetric matrix eigenvalues
    subroutine test_eigh_real_${ri}$(error)
        logical,intent(out) :: error

        !> Reference solution
        real(${rk}$), parameter :: zero   = 0.0_${rk}$
        real(${rk}$), parameter :: tol    = sqrt(epsilon(zero))
        real(${rk}$), parameter :: A(4,4) = reshape([6,3,1,5, &
                                               3,0,5,1, &
                                               1,5,6,2, &
                                               5,1,2,2],[4,4])
        
        !> Local variables
        real(${rk}$) :: Amat(4,4),lambda(4),vect(4,4),Av(4,4),lv(4,4)
        type(la_state) :: state
        
        Amat = A
        
        call eigh(Amat,lambda,vect,err=state)
        
        Av = matmul(A,vect)
        lv = matmul(vect,diag(lambda))
        
        error = state%error() .or. .not. all(abs(Av-lv)<tol*abs(Av))
        if (error) return
        
        !> Test functional versions
        lambda = eigvalsh(Amat)
   
        lambda = eigvalsh(Amat,err=state)
        error = state%error()
        if (error) return
        
        !> Test functional versions
        Amat = A
        lambda = eigvalsh(Amat,upper_a=.false.,err=state)
        error = state%error()
        if (error) return        
        
    end subroutine test_eigh_real_${ri}$

    #:endfor

    !> Simple complex matrix eigenvalues
    #:for ck,ct,ci in CMPL_KINDS_TYPES
    subroutine test_eig_complex_${ci}$(error)
        logical,intent(out) :: error

        !> Reference solution
        real(${ck}$), parameter :: zero    = 0.0_${ck}$
        real(${ck}$), parameter :: two     = 2.0_${ck}$
        real(${ck}$), parameter :: sqrt2o2 = sqrt(two)*0.5_${ck}$
        real(${ck}$), parameter :: tol     = sqrt(epsilon(zero))
        ${ct}$, parameter :: cone  = (1.0_${ck}$,0.0_${ck}$)
        ${ct}$, parameter :: cimg  = (0.0_${ck}$,1.0_${ck}$)
        ${ct}$, parameter :: czero = (0.0_${ck}$,0.0_${ck}$)

        !> Local vaciables
        type(la_state) :: state
        ${ct}$ :: A(2,2),lambda(2),Avec(2,2),Ares(2,2),lres(2)

        !> Matcix with real eigenvalues
        A = transpose(reshape([ cone, cimg, &
                               -cimg, cone], [2,2]))
                
        call eig(A,lambda,right=Avec,err=state)
        
        !> Expected eigenvalues and eigenvectors
        lres(1)   = two
        lres(2)   = zero
        
        !> Eigenvectors may vary: do not use for error
        Ares(1,1) = cmplx(zero,sqrt2o2,kind=${ck}$)
        Ares(1,2) = cmplx(sqrt2o2,zero,kind=${ck}$)
        Ares(2,1) = cmplx(sqrt2o2,zero,kind=${ck}$)
        Ares(2,2) = cmplx(zero,sqrt2o2,kind=${ck}$)        
        
        error = state%error() .or. any(abs(lambda-lres)>tol)
        if (error) return       
        
    end subroutine test_eig_complex_${ci}$

    #:endfor


end module test_linalg_eig


