#:include "common.fypp"
! Return a 2-D matrix with ones on the diagonal and zeros everywhere else
module la_eye
     use la_constants
     use la_blas
     use la_lapack
     use la_state_type
     use iso_fortran_env,only:real32,real64,real128,int8,int16,int32,int64,stderr => error_unit
     implicit none(type,external)
     private

     !> Function interface
     public :: eye
     public :: diag

     ! Numpy: eye(N, M=None, k=0, dtype=<class 'float'>, order='C', *, device=None, like=None)
     ! Numpy: identity(n, dtype=None, *, like=None) --> square matrices only
     ! Scipy: eye(m, n=None, k=0, dtype=<class 'float'>, format=None) --> sparse only
     ! IMSL:  EYE(N)

     ! Identity interface
     interface eye
        #:for epref,esuf,earg,epresent in FUNCTION_INTERFACES
        #:for rk,rt,ri in ALL_KINDS_TYPES
        module procedure la_eye_${ri}$${esuf}$
        #:endfor
        #:endfor
     end interface eye

     ! Diagonal matrix interface
     interface diag
        #:for epref,esuf,earg,epresent in FUNCTION_INTERFACES
        #:for rk,rt,ri in ALL_KINDS_TYPES
        module procedure la_diag_${ri}$${esuf}$_from_scalar
        module procedure la_diag_${ri}$${esuf}$_from_array
        #:endfor
        #:endfor
     end interface diag

     contains

     #:for epref,esuf,earg,epresent in FUNCTION_INTERFACES
     #:for rk,rt,ri in ALL_KINDS_TYPES
     ! Return diagonal eye matrix of size N
     ${epref}$function la_eye_${ri}$${esuf}$(m,n,mold${earg}$) result(eye)
         !> Number of rows
         integer(ilp), intent(in) :: m
         !> Number of columns (optional)
         integer(ilp), optional, intent(in) :: n
         !> Datatype. Used to define the return type. Defaults to real(real64)
         #:if rt=='real(dp)'
         ${rt}$, optional, intent(in) :: mold
         #:else
         ${rt}$, intent(in) :: mold
         #:endif
         #:if epresent
         !> [optional] state return flag. On error if not requested, the code will stop
         type(la_state), intent(out) :: err
         #:endif
         !> Return matrix
         ${rt}$, allocatable :: eye(:,:)

         !> Local variables
         integer(ilp) :: i,j,cols
         type(la_state) :: err0
         character(*), parameter :: this = 'eye'

         !> Determine number of columns
         if (present(n)) then
            cols = n
         else
            cols = m
         endif

         !> Check size
         if (.not.min(m,cols)>=0) then
            err0 = la_state(this,LINALG_VALUE_ERROR,'invalid eye size: eye[',m,',',n,']')
            allocate(eye(0,0))
            call err0%handle(#{if epresent}#err#{endif}#)
            return
         end if

         ! Allocate array
         allocate(eye(m,cols))

         !> Empty matrix
         if (min(m,cols)<=0) return

         !> Fill data
         do concurrent (i=1:m,j=1:cols)
            eye(i,j) = merge(1.0_${rk}$,0.0_${rk}$,i==j)
         end do

         ! Process output and return
         1 call err0%handle(#{if epresent}#err#{endif}#)

     end function la_eye_${ri}$${esuf}$

     #:endfor

     #:for rk,rt,ri in ALL_KINDS_TYPES
     ! Return square diagonal matrix with diagonal values equal to the input scalar
     ${epref}$function la_diag_${ri}$${esuf}$_from_scalar(n,source${earg}$) result(diag)
         !> Matrix size
         integer(ilp), intent(in) :: n
         !> Scalar diagonal value. Used to define the return type.
         ${rt}$, intent(in) :: source
         #:if epresent
         !> [optional] state return flag. On error if not requested, the code will stop
         type(la_state), intent(out) :: err
         #:endif
         !> Return matrix
         ${rt}$, allocatable :: diag(:,:)

         !> Local variables
         integer(ilp) :: i,j
         type(la_state) :: err0
         character(*), parameter :: this = 'diag::scalar'

         !> Check size
         if (.not.n>=0) then
            err0 = la_state(this,LINALG_VALUE_ERROR,'invalid diagonal size: diag[',n,',',n,']')
            allocate(diag(0,0))
            call err0%handle(#{if epresent}#err#{endif}#)
            return
         end if

         ! Allocate array
         allocate(diag(n,n))

         !> Empty matrix
         if (n<=0) return

         !> Fill data
         do concurrent (i=1:n,j=1:n)
            if (i==j) then
               diag(i,j) = source
            else
               diag(i,j) = 0.0_${rk}$
            endif
         end do

         ! Process output and return
         1 call err0%handle(#{if epresent}#err#{endif}#)

     end function la_diag_${ri}$${esuf}$_from_scalar

     ! Construct square diagonal matrix from an array of diagonal values
     ${epref}$function la_diag_${ri}$${esuf}$_from_array(source${earg}$) result(diag)
         !> Array of diagonal values. Used to define the return type and the matrix size.
         ${rt}$, intent(in) :: source(:)
         #:if epresent
         !> [optional] state return flag. On error if not requested, the code will stop
         type(la_state), intent(out) :: err
         #:endif
         !> Return matrix
         ${rt}$, allocatable :: diag(:,:)

         !> Local variables
         integer(ilp) :: i,j,n
         type(la_state) :: err0
         character(*), parameter :: this = 'diag::array'

         n = size(source, kind=ilp)

         !> Check size
         if (.not.n>=0) then
            err0 = la_state(this,LINALG_VALUE_ERROR,'invalid input array size: diag[',n,',',n,']')
            allocate(diag(0,0))
            call err0%handle(#{if epresent}#err#{endif}#)
            return
         end if

         ! Allocate array
         allocate(diag(n,n))

         !> Empty matrix
         if (n<=0) return

         !> Fill data
         do concurrent (i=1:n,j=1:n)
            if (i==j) then
               diag(i,j) = source(i)
            else
               diag(i,j) = 0.0_${rk}$
            endif
         end do

         ! Process output and return
         call err0%handle(#{if epresent}#err#{endif}#)

     end function la_diag_${ri}$${esuf}$_from_array

     #:endfor
     #:endfor

end module la_eye
