#:include "common.fypp"

#! Generates an array rank suffix with a fixed integer size for all dimensions.
#!
#! Args:
#!     rank (int): Rank of the variable
#!     size (int): Size along each dimension
#!
#! Returns:
#!     Array rank suffix string (e.g. (4,4,4) if rank = 3 and size = 4)
#!
#:def fixedranksuffix(rank,size)
#{if rank > 0}#(${str(size) + (","+str(size)) * (rank - 1)}$)#{endif}#
#:enddef
! Test matrix norms 
module test_linalg_norms
    use stdlib_linalg_interface

    implicit none (type,external)

    contains

    !> Vector norm test: array interfaces
    subroutine test_norms(error)
        logical, intent(out) :: error

        real :: t0,t1

        call cpu_time(t0)

        #:for rk,rt,ri in ALL_KINDS_TYPES
        #:for rank in range(1, MAXRANK)
        call test_norm_${ri}$_${rank}$d(error)
        if (error) return
        #:endfor
        #:for rank in range(2, MAXRANK)
        #:if rt.startswith('real')
        call test_norm2_${ri}$_${rank}$d(error)
        if (error) return
        #:endif
        #:endfor
        #:endfor

        call cpu_time(t1)

        print 1, 1000*(t1-t0), merge('SUCCESS','ERROR  ',.not.error)

        1 format('Vector norm tests completed in ',f9.4,' milliseconds, result=',a)

    end subroutine test_norms
    
    #:for rk,rt,ri in ALL_KINDS_TYPES
    #:for rank in range(1, MAXRANK)
    
    !> Test several norms with different dimensions
    subroutine test_norm_${ri}$_${rank}$d(error)
        logical,intent(out) :: error

        integer(ilp) :: j,order
        integer(ilp), parameter :: n   = 2_ilp**${rank}$
        real(${rk}$), parameter :: tol = 10*sqrt(epsilon(0.0_${rk}$))
        ${rt}$, allocatable :: a(:), b${ranksuffix(rank)}$
        
        allocate(a(n), b${fixedranksuffix(rank,2)}$)
        
        ! Init as a range,but with small elements such that all power norms will 
        ! never overflow, even in single precision
        a = [(0.01_${rk}$*(j-n/2_ilp), j=1_ilp,n)]        
        b = reshape(a, shape(b))
        
        ! Test some norms
        do order = 1, 10            
           error = .not. abs(norm(a,order)-norm(b,order))<tol*max(1.0_${rk}$,norm(a,order))
           if (error) return
        end do
        
        ! Infinity norms
        error = .not. abs(norm(a,'inf')-norm(b,'inf'))<tol*max(1.0_${rk}$,norm(a,'inf'))
        if (error) return        

        ! Infinity norms
        error = .not. abs(norm(a,'-inf')-norm(b,'-inf'))<tol*max(1.0_${rk}$,norm(a,'-inf'))
        if (error) return        
        
    end subroutine test_norm_${ri}$_${rank}$d
    #:endfor

    !> Test Euclidean norm; compare with Fortran intrinsic norm2 for reals
    #:for rank in range(2, MAXRANK)
    #:if rt.startswith('real')
    subroutine test_norm2_${ri}$_${rank}$d(error)
        logical,intent(out) :: error

        integer(ilp) :: j,dim
        integer(ilp), parameter :: ndim = ${rank}$
        integer(ilp), parameter :: n   = 2_ilp**ndim
        real(${rk}$), parameter :: tol = 10*sqrt(epsilon(0.0_${rk}$))
        ${rt}$, allocatable :: a(:), b${ranksuffix(rank)}$
        intrinsic :: norm2
        
        allocate(a(n), b${fixedranksuffix(rank,2)}$)
        
        ! Init as a range,but with small elements such that all power norms will 
        ! never overflow, even in single precision
        a = [(0.01_${rk}$*(j-n/2_ilp), j=1_ilp,n)]        
        b = reshape(a, shape(b))
        
        ! Test some norms
        error = .not. abs(norm(a,2) - norm2(a))<tol*norm(a,2)
        if (error) return
        
        ! Infinity norms
        error = .not. abs(norm(b,2)-norm2(b))<tol*norm(b,2)
        if (error) return        
        
        ! Test norm as collapsed around dimension
        do dim = 1, ndim
            
            error = .not.all(abs(norm(b,2,dim)-norm2(b,dim))<tol*max(1.0_${rk}$,norm(b,2,dim)))
            if (error) return
            
        end do
        
    end subroutine test_norm2_${ri}$_${rank}$d
    #:endif

    #:endfor
    #:endfor


end module test_linalg_norms


