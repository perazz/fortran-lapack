#:include "common.fypp"
#:set RANKS = range(1, MAXRANK + 1)
#:set INPUT_TYPE    = ["character(len=*)","integer(ilp)"]
#:set INPUT_SHORT   = ["char","int"]
#:set INPUT_OPTIONS = list(zip(INPUT_TYPE,INPUT_SHORT))

#!
#! Generates a list of loop variables
#!
#! Args:
#!   varname(str): Name of the variable to be used as prefix
#!   n      (int): Number of loop variables to be created
#!   offset (int): Optional index offset
#!
#! Returns:
#!   Variable definition string 
#!
#! E.g.,
#!  loop_variables('j', 5)
#!   -> "j1, j2, j3, j4, j5
#!
#:def loop_variables(varname, n, offset=0)
  #:assert n > 0
    #:call join_lines(joinstr=", ")
      #:for i in range(1, n + 1)
        ${varname}$${i+offset}$
      #:endfor
    #:endcall
#:enddef

#! Generates an array shape specifier from an N-D array size
#!
#! Args:
#!   name  (str): Name of the original variable
#!   rank  (int): Rank of the original variable
#!   offset(int): optional offset of the dimension loop (default = 0)
#!
#! Returns:
#!   Array rank suffix string enclosed in braces
#!
#! E.g.,
#!   shape_from_array_size('mat', 5)}$
#!   -> (size(mat,1),size(mat,2),size(mat,3),size(mat,4),size(mat,5))
#!   shape_from_array_size('mat', 5, 2)}$
#!   -> (size(mat,3),size(mat,4),size(mat,5),size(mat,6),size(mat,7))
#!
#:def shape_from_array_size(name, rank, offset=0)
  #:assert rank > 0
  #:call join_lines(joinstr=", ", prefix="(", suffix=")")
    #:for i in range(1, rank + 1)
      size(${name}$,${i+offset}$)
    #:endfor
  #:endcall
#:enddef

#! Generates an array shape specifier from an N-D array of sizes
#!
#! Args:
#!   name  (str): Name of the original variable
#!   rank  (int): Rank of the original variable
#!   offset(int): optional offset of the dimension loop (default = 0)
#!
#! Returns:
#!   Array rank suffix string enclosed in braces
#!
#! E.g.,
#!   shape_from_array_data('mat', 5)}$
#!   -> (1:mat(1),1:mat(2),1:mat(3),1:mat(4),1:mat(5))
#!   shape_from_array_data('mat', 5, 2)}$
#!   -> (1:mat(3),1:mat(4),1:mat(5),1:mat(6),1:mat(7))
#!
#:def shape_from_array_data(name, rank, offset=0)
  #:assert rank > 0
  #:call join_lines(joinstr=", ", prefix="(", suffix=")")
    #:for i in range(1, rank + 1)
      1:${name}$(${i+offset}$)
    #:endfor
  #:endcall
#:enddef

#!
#! Start a sequence of loop with indexed variables over an N-D array
#!
#! Args:
#!   varname    (str): Name of the variable to be used as prefix
#!   matname    (str): Name of the variable to be used as array
#!   n          (int): Number of nested loops to be created (1=innermost; n=outermost)
#!   dim_offset (int): Optional dimension offset (1st loop is over dimension 1+dim_offset)
#!   intent     (str): Optional indentation. Default: 8 spaces
#!
#!
#:def loop_variables_start(varname, matname, n, dim_offset=0, indent=" "*8)
  #:assert n > 0
    #:for i in range(1, n + 1)
${indent}$do ${varname}$${n+1+dim_offset-i}$ = lbound(${matname}$, ${n+1+dim_offset-i}$), ubound(${matname}$, ${n+1+dim_offset-i}$)
    #:endfor
#:enddef

#:def loop_variables_end(n, indent=" "*8)
#:assert n > 0
  #:call join_lines(joinstr="; ",prefix=indent)
    #:for i in range(1, n + 1)
       enddo 
    #:endfor
  #:endcall  
#:enddef

!> Matrix and Vector norms
module la_norms
     use la_constants
     use la_blas, only: nrm2
     use la_lapack, only: lange
     use la_state_type
     use iso_fortran_env,only:real32,real64,real128,int8,int16,int32,int64,stderr => error_unit
     implicit none(type,external)
     private
     
     public :: norm, get_norm, mnorm

     character(*), parameter :: this = 'norm'
     
     ! List of internal norm flags
     integer(ilp), parameter :: NORM_ONE       = 1_ilp 
     integer(ilp), parameter :: NORM_TWO       = 2_ilp
     integer(ilp), parameter :: NORM_POW_FIRST = 3_ilp       
     integer(ilp), parameter :: NORM_INF      = +huge(0_ilp) ! infinity norm 
     integer(ilp), parameter :: NORM_POW_LAST  = NORM_INF - 1_ilp
     integer(ilp), parameter :: NORM_MINUSINF = -huge(0_ilp)
     
     ! List of *LANGE norm flags
     character, parameter :: LANGE_NORM_MAT = 'M' !> maxval(sum(abs(a))), over whole matrix: unused
     character, parameter :: LANGE_NORM_ONE = '1' !> maxval(sum(abs(a),1)), over columns
     character, parameter :: LANGE_NORM_INF = 'I' !> maxval(sum(abs(a),2)), over rows
     character, parameter :: LANGE_NORM_TWO = 'E' !> "Euclidean" or "Frobenius"
     
     !> @brief Compute the norm of a vector or matrix using LAPACK-based routines.
     !!
     !! Return one of several scalar norm metrics of a real or complex input array A, that can have any rank. 
     !! For generic rank-n arrays, the scalar norm over the whole array is returned by default. 
     !! If \f$ n \geq 2 \f$ and the optional input dimension `dim` is specified, a rank \f$ n-1 \f$ array is returned with dimension `dim` collapsed, 
     !! containing all 1D array norms evaluated along dimension `dim` only.
     !!
     !! Norm type input is mandatory, and it is provided via the `order` argument. This can be provided as either an integer value or a character string. 
     !! Allowed metrics are:
     !! - 1-norm \f$ \sum_i |a_i| \f$: `order = 1` or `order = "1"`
     !! - Euclidean norm \f$ \sqrt{\sum_i a_i^2} \f$: `order = 2` or `order = "2"`
     !! - p-norm \f$ \left( \sum_i |a_i|^p \right)^{1/p} \f$: integer `order >= 3` 
     !! - Infinity norm \f$ \max_i |a_i| \f$: `order = huge(0)` or `"inf"`
     !! - Minus-infinity norm \f$ \min_i |a_i| \f$: `order = -huge(0)` or `"-inf"`
     !!
     !! @param[in] a The input vector or matrix. It may have rank 1 (vector) or higher.
     !! @param[in] order The order of the norm to compute, typically one of the allowed metrics.
     !! @param[in] dim (Optional) The dimension along which to compute the norm, 
     !!               applicable for array norms reducing rank.
     !! @param[out] err (Optional) A state return flag. If an error occurs and `err` is not provided,
     !!                 the function will stop execution.
     !!
     !! @return The computed norm value. If `dim` is specified, the result is a lower-rank array;
     !!         otherwise, it is a scalar.
     !!
     !! @note This interface utilizes LAPACK routines for efficient computation, ensuring numerical stability.
     !! @warning If invalid input values (such as negative norms) are provided, the behavior is undefined.
     !!  
     interface norm
        #:for rk,rt,ri in ALL_KINDS_TYPES
        #:for it,ii in INPUT_OPTIONS
        !> Scalar norms: ${rt}$
        #:for rank in RANKS        
        module procedure la_norm_${rank}$D_order_${ii}$_${ri}$         
        module procedure la_norm_${rank}$D_order_err_${ii}$_${ri}$         
        #:endfor
        !> Array norms: ${rt}$
        #:for rank in range(2, MAXRANK + 1)
        module procedure la_norm_${rank}$D_to_${rank-1}$D_${ii}$_${ri}$
        module procedure la_norm_${rank}$D_to_${rank-1}$D_err_${ii}$_${ri}$
        #:endfor
        #:endfor        
        #:endfor
     end interface norm
     
     !> Vector norm: subroutine interface
     interface get_norm
        #:for rk,rt,ri in ALL_KINDS_TYPES
        #:for it,ii in INPUT_OPTIONS
            !> Scalar norms: ${rt}$
            #:for rank in RANKS                    
            module procedure norm_${rank}$D_${ii}$_${ri}$
            #:endfor
            !> Array norms: ${rt}$
            #:for rank in range(2, MAXRANK + 1)
            module procedure norm_${rank}$D_to_${rank-1}$D_${ii}$_${ri}$
            #:endfor
        #:endfor
        #:endfor
     end interface get_norm
     
     !> Matrix norm: function interface
     interface mnorm
         #:for rk,rt,ri in ALL_KINDS_TYPES
         #:for it,ii in INPUT_OPTIONS        
         module procedure matrix_norm_${ii}$_${ri}$
         #:for rank in range(3, MAXRANK + 1)
         module procedure matrix_norm_${rank}$D_to_${rank-2}$D_${ii}$_${ri}$
         #:endfor            
         #:endfor
         #:endfor            
     end interface mnorm
     
     interface parse_norm_type
        module procedure parse_norm_type_integer
        module procedure parse_norm_type_character
     end interface parse_norm_type
     
     contains
     
     !> Parse norm type from an integer user input
     pure subroutine parse_norm_type_integer(order,norm_type,err)
        !> User input value
        integer(ilp), intent(in) :: order
        !> Return value: norm type
        integer(ilp), intent(out) :: norm_type
        !> State return flag
        type(la_state), intent(out) :: err
        
        select case (order)
           case (1_ilp)
               norm_type = NORM_ONE
           case (2_ilp)
               norm_type = NORM_TWO
           case (3_ilp:huge(0_ilp)-1_ilp)
               norm_type = order
           case (huge(0_ilp):)
               norm_type = NORM_INF
           case (:-huge(0_ilp))
               norm_type = NORM_MINUSINF
           
           case default
               norm_type = NORM_ONE
               err = la_state(this,LINALG_ERROR,'Input norm type ',order,' is not recognized.')
        end select    
        
     end subroutine parse_norm_type_integer

     pure subroutine parse_norm_type_character(order,norm_type,err)
        !> User input value
        character(len=*), intent(in) :: order
        !> Return value: norm type
        integer(ilp), intent(out) :: norm_type
        !> State return flag
        type(la_state), intent(out) :: err
        
        integer(ilp) :: int_order,read_err
        
        select case (order)
           case ('inf','Inf','INF')
              norm_type = NORM_INF
           case ('-inf','-Inf','-INF')
              norm_type = NORM_MINUSINF
           case ('Euclidean','euclidean','EUCLIDEAN')
              norm_type = NORM_TWO
           case default
            
              ! Check if this input can be read as an integer
              read(order,*,iostat=read_err) int_order
              if (read_err/=0) then 
                 ! Cannot read as an integer
                 norm_type = NORM_ONE
                 err = la_state(this,LINALG_ERROR,'Input norm type ',order,' is not recognized.')                 
              else
                 call parse_norm_type_integer(int_order,norm_type,err)
              endif  

        end select    
        
     end subroutine parse_norm_type_character

     !> From a user norm request, generate a *LANGE task command
     pure subroutine lange_task_request(norm_type,lange_task,err)
        !> Parsed matrix norm type
        integer(ilp), intent(in) :: norm_type
        !> LANGE task
        character, intent(out) :: lange_task
        !> Error flag
        type(la_state), intent(inout) :: err
        
        select case (norm_type)
           case (NORM_INF)
              lange_task = LANGE_NORM_INF 
           case (NORM_ONE)
              lange_task = LANGE_NORM_ONE
           case (NORM_TWO)
              lange_task = LANGE_NORM_TWO
           case default 
              err = la_state(this,LINALG_VALUE_ERROR,'Order ',norm_type,' is not a valid matrix norm input.')
        end select
     end subroutine lange_task_request
               
    #:for rk,rt,ri in ALL_KINDS_TYPES
    #:for it,ii in INPUT_OPTIONS

    !==============================================
    ! Norms : any rank to scalar
    !==============================================

    #:for rank in RANKS

    ! Pure function interface, with order specification. On error, the code will stop
    pure function la_norm_${rank}$D_order_${ii}$_${ri}$(a, order) result(nrm)
        !> Input ${rank}$-d matrix a${ranksuffix(rank)}$
        ${rt}$, intent(in) :: a${ranksuffix(rank)}$
        !> Order of the matrix norm being computed.
        ${it}$, intent(in) :: order
        !> Norm of the matrix.
        real(${rk}$) :: nrm
                                    
        call norm_${rank}$D_${ii}$_${ri}$(a, nrm=nrm, order=order)
        
    end function la_norm_${rank}$D_order_${ii}$_${ri}$
    
    ! Function interface with output error
    function la_norm_${rank}$D_order_err_${ii}$_${ri}$(a, order, err) result(nrm)
        !> Input ${rank}$-d matrix a${ranksuffix(rank)}$
        ${rt}$, intent(in) :: a${ranksuffix(rank)}$
        !> Order of the matrix norm being computed.
        ${it}$, intent(in) :: order
        !> Output state return flag. 
        type(la_state), intent(out) :: err                         
        !> Norm of the matrix.
        real(${rk}$) :: nrm                 
                
        call norm_${rank}$D_${ii}$_${ri}$(a, nrm=nrm, order=order, err=err)
        
    end function la_norm_${rank}$D_order_err_${ii}$_${ri}$
    
    ! Internal implementation
    pure subroutine norm_${rank}$D_${ii}$_${ri}$(a, nrm, order, err)
        !> Input ${rank}$-d matrix a${ranksuffix(rank)}$
        ${rt}$, intent(in) :: a${ranksuffix(rank)}$
        !> Norm of the matrix.
        real(${rk}$), intent(out) :: nrm
        !> Order of the matrix norm being computed.
        ${it}$, intent(in) :: order
        !> [optional] state return flag. On error if not requested, the code will stop
        type(la_state), intent(out), optional :: err         
        
        type(la_state) :: err0
        
        intrinsic :: abs, sum, sqrt, norm2, maxval, minval, conjg
        integer(ilp) :: sze,norm_request
        real(${rk}$) :: rorder
        
        sze = size(a,kind=ilp)
        
        ! Initialize norm to zero
        nrm = 0.0_${rk}$
        
        ! Check matrix size
        if (sze<=0) then
            err0 = la_state(this,LINALG_VALUE_ERROR,'invalid matrix shape: a=',shape(a,kind=ilp))
            call err0%handle(err)
            return
        end if
        
        ! Check norm request
        call parse_norm_type(order,norm_request,err0)
        if (err0%error()) then 
            call err0%handle(err)
            return
        endif          
        
        select case(norm_request)
            case(NORM_ONE)
                nrm = sum( abs(a) )
            case(NORM_TWO)            
                #:if rt.startswith('complex')
                nrm = sqrt( real( sum( a * conjg(a) ), ${rk}$) )
                #:else
                nrm = norm2( a )
                #:endif             
            case(NORM_INF)
                nrm = maxval( abs(a) )
            case(-NORM_INF)
                nrm = minval( abs(a) )
            case (NORM_POW_FIRST:NORM_POW_LAST)
                rorder = 1.0_${rk}$ / norm_request
                nrm = sum( abs(a) ** norm_request ) ** rorder
            case default
                err0 = la_state(this,LINALG_INTERNAL_ERROR,'invalid norm type after checking')
                call err0%handle(err)
        end select
        
    end subroutine norm_${rank}$D_${ii}$_${ri}$

    #:endfor

    !====================================================================
    ! Norms : any rank to rank-1, with DIM specifier and ${ii}$ input
    !====================================================================

    #:for rank in range(2, MAXRANK + 1)
    
    ! Pure function interface with DIM specifier. On error, the code will stop
    pure function la_norm_${rank}$D_to_${rank-1}$D_${ii}$_${ri}$(a, order, dim) result(nrm)
        !> Input matrix a[..]
        ${rt}$, intent(in), target :: a${ranksuffix(rank)}$
        !> Order of the matrix norm being computed.
        ${it}$, intent(in) :: order
        !> Dimension to collapse by computing the norm w.r.t other dimensions
        integer(ilp), intent(in) :: dim
        !> Norm of the matrix.
        real(${rk}$) :: nrm${reduced_shape('a', rank, 'dim')}$     
        
        call norm_${rank}$D_to_${rank-1}$D_${ii}$_${ri}$(a, nrm, order, dim)
            
    end function la_norm_${rank}$D_to_${rank-1}$D_${ii}$_${ri}$

    ! Function interface with DIM specifier and output error state.
    function la_norm_${rank}$D_to_${rank-1}$D_err_${ii}$_${ri}$(a, order, dim, err) result(nrm)
        !> Input matrix a[..]
        ${rt}$, intent(in), target :: a${ranksuffix(rank)}$
        !> Order of the matrix norm being computed.
        ${it}$, intent(in) :: order
        !> Dimension to collapse by computing the norm w.r.t other dimensions
        integer(ilp), intent(in) :: dim
        !> Output state return flag. 
        type(la_state), intent(out) :: err                                 
        !> Norm of the matrix.
        real(${rk}$) :: nrm${reduced_shape('a', rank, 'dim')}$     
        
        call norm_${rank}$D_to_${rank-1}$D_${ii}$_${ri}$(a, nrm, order, dim, err)
            
    end function la_norm_${rank}$D_to_${rank-1}$D_err_${ii}$_${ri}$
    
    ! Internal implementation 
    pure subroutine norm_${rank}$D_to_${rank-1}$D_${ii}$_${ri}$(a, nrm, order, dim, err)
        !> Input matrix a[..]
        ${rt}$, intent(in), target :: a${ranksuffix(rank)}$
        !> Dimension to collapse by computing the norm w.r.t other dimensions
        !  (dim must be defined before it is used for `nrm`)
        integer(ilp), intent(in) :: dim        
        !> Norm of the matrix.        
        real(${rk}$), intent(out) :: nrm${reduced_shape('a', rank, 'dim')}$     
        !> Order of the matrix norm being computed.
        ${it}$, intent(in) :: order
        !> [optional] state return flag. On error if not requested, the code will stop
        type(la_state), intent(out), optional :: err           
        
        type(la_state) :: err0
        integer(ilp) :: sze,norm_request
        real(${rk}$) :: rorder
        intrinsic :: sum, abs, sqrt, conjg, norm2, maxval, minval
        
        sze = size(a,kind=ilp)
        
        ! Initialize norm to zero
        nrm = 0.0_${rk}$
        
        if (sze<=0) then
            err0 = la_state(this,LINALG_VALUE_ERROR,'invalid matrix shape: a=',shape(a,kind=ilp))
            call err0%handle(err)
            return
        end if

        ! Check dimension choice
        if (dim<1 .or. dim>${rank}$) then
            err0 = la_state(this,LINALG_VALUE_ERROR,'dimension ',dim, &
                                'is out of rank for shape(a)=',shape(a,kind=ilp))
            call err0%handle(err)
            return
        end if
        
        ! Check norm request
        call parse_norm_type(order,norm_request,err0)
        if (err0%error()) then 
            call err0%handle(err)
            return
        endif                   
        
        select case(norm_request)            
            case(NORM_ONE)
                nrm = sum( abs(a) , dim = dim )                
            case(NORM_TWO)                
                #:if rt.startswith('complex')
                nrm = sqrt( real( sum( a * conjg(a) , dim = dim ), ${rk}$) )
                #:else
                nrm = norm2( a , dim = dim )
                #:endif
            case(NORM_INF)
                nrm = maxval( abs(a) , dim = dim )
            case(-NORM_INF)
                nrm = minval( abs(a) , dim = dim )
            case (NORM_POW_FIRST:NORM_POW_LAST)
                rorder = 1.0_${rk}$ / norm_request
                nrm = sum( abs(a) ** norm_request , dim = dim ) ** rorder
            case default
                err0 = la_state(this,LINALG_INTERNAL_ERROR,'invalid norm type after checking')
                call err0%handle(err)            
        end select
        
    end subroutine norm_${rank}$D_to_${rank-1}$D_${ii}$_${ri}$

    #:endfor
    
    !====================================================================
    ! Matrix norms
    !====================================================================    
    
    ! Internal implementation 
    function matrix_norm_${ii}$_${ri}$(a, order, err) result(nrm)
        !> Input matrix a(m,n)
        ${rt}$, intent(in), target :: a(:,:)
        !> Norm of the matrix.        
        real(${rk}$) :: nrm
        !> Order of the matrix norm being computed.
        ${it}$, intent(in) :: order
        !> [optional] state return flag. On error if not requested, the code will stop
        type(la_state), intent(out), optional :: err           
        
        type(la_state) :: err0
        integer(ilp) :: m,n,norm_request
        character :: lange_task
        real(${rk}$), target :: work1(1)
        real(${rk}$), pointer :: work(:)        
        
        m = size(a,dim=1,kind=ilp)
        n = size(a,dim=2,kind=ilp)
        
        ! Initialize norm to zero
        nrm = 0.0_${rk}$
        
        if (m<=0 .or. n<=0) then
            err0 = la_state(this,LINALG_VALUE_ERROR,'invalid matrix shape: a=',[m,n])
            call err0%handle(err)
            return
        end if

        ! Check norm request: user + *LANGE support
        call parse_norm_type(order,norm_request,err0)
        call lange_task_request(norm_request,lange_task,err0)
        if (err0%error()) then 
            call err0%handle(err)
            return
        endif       
        
        if (lange_task==LANGE_NORM_INF) then 
            allocate(work(m))
        else
            work => work1
        endif
        
        ! LAPACK interface
        nrm = lange(lange_task,m,n,a,m,work)
        
        if (lange_task==LANGE_NORM_INF) deallocate(work)
        
    end function matrix_norm_${ii}$_${ri}$
    
    #:for rank in range(3, MAXRANK + 1)
    
    ! Pure function interface with DIM specifier. On error, the code will stop
    function matrix_norm_${rank}$D_to_${rank-2}$D_${ii}$_${ri}$(a, order, dim, err) result(nrm)
        !> Input matrix a(m,n)
        ${rt}$, intent(in), contiguous, target :: a${ranksuffix(rank)}$
        !> Norm of the matrix.        
        real(${rk}$), allocatable :: nrm${ranksuffix(rank-2)}$
        !> Order of the matrix norm being computed.
        ${it}$, intent(in) :: order
        !> [optional] dimensions of the sub-matrices the norms should be evaluated at (default = [1,2])
        integer(ilp), optional, intent(in) :: dim(2)
        !> [optional] state return flag. On error if not requested, the code will stop
        type(la_state), intent(out), optional :: err  
        
        type(la_state) :: err0
        integer(ilp) :: j,m,n,lda,dims(2),norm_request
        integer(ilp), dimension(${rank}$) :: s,spack,perm
        integer(ilp), dimension(${rank}$), parameter :: dim_range = [(m,m=1_ilp,${rank}$_ilp)]
        integer(ilp) :: ${loop_variables('j',rank-2,2)}$
        logical :: contiguous_data
        character :: lange_task
        real(${rk}$), target :: work1(1)
        real(${rk}$), pointer :: work(:)        
        ${rt}$, pointer :: apack${ranksuffix(rank)}$
        
        ! Get dimensions
        if (present(dim)) then 
           dims = dim 
        else
           dims = [1,2]
        endif
        
        nullify(apack)

        if (dims(1)==dims(2) .or. .not.all(dims>0 .and. dims<=${rank}$)) then 
            err0 = la_state(this,LINALG_VALUE_ERROR,'Rank-',${rank}$,' matrix norm has invalid dim=',dims)
            allocate(nrm${emptyranksuffix(rank-2)}$)
            call err0%handle(err)
            return
        endif
        
        ! Check norm request: user + *LANGE support
        call parse_norm_type(order,norm_request,err0)
        call lange_task_request(norm_request,lange_task,err0)
        if (err0%error()) then 
            call err0%handle(err)
            return
        endif             
        
        ! Input matrix properties
        s = shape(a,kind=ilp)
        
        ! Check if input column data is contiguous
        contiguous_data = dims(1)==1
        
        ! Matrix norm size
        m = s(dims(1))
        n = s(dims(2))

        ! Get packed data with norm dimensions as 1:2
        if (contiguous_data) then 
            
            ! Collapse everything before the 1st dimension as apack's dim #1
            ! Set size==1 for all unused trailing dimensions            
            spack  = [product(s(:dims(2)-1)),s(dims(2):),(1_ilp,j=1,dims(2)-2)]
            
            ! Reshape without moving data
            apack${shape_from_array_data('spack',rank)}$ => a
            
        else
            
            ! Dimension permutations to map dims(1),dims(2) => 1:2
            perm  = [dims,pack(dim_range, dim_range/=dims(1) .and. dim_range/=dims(2))]            
            spack = s(perm)            
            apack = reshape(a, shape=spack, order=perm)            
            
        endif
            
        if (lange_task==LANGE_NORM_INF) then 
            allocate(work(m))
        else
            work => work1
        endif
        
        ! Allocate norm        
        allocate(nrm${shape_from_array_size('apack',rank-2, 2)}$)
        
        lda = size(apack,dim=1,kind=ilp)
        
        ! LAPACK interface
${loop_variables_start('j', 'apack', rank-2, 2)}$
        nrm(${loop_variables('j',rank-2,2)}$) = &
        lange(lange_task,m,n,apack(:,:,${loop_variables('j',rank-2,2)}$),lda,work)
${loop_variables_end(rank-2)}$
        
        if (lange_task==LANGE_NORM_INF) deallocate(work)
        if (.not.contiguous_data) deallocate(apack)
        
        
    end function matrix_norm_${rank}$D_to_${rank-2}$D_${ii}$_${ri}$
    
    #:endfor
    
    #:endfor
    #:endfor

end module la_norms
