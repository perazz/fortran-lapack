#:include "common.fypp"
module test_linalg_least_squares
    use linear_algebra
    implicit none (type,external)

    contains

    !> Solve sample least square problems
    subroutine test_least_squares(error)
        logical, intent(out) :: error

        print *, 'Least squares tests...'

        #:for rk,rt,ri in REAL_KINDS_TYPES
        call test_${ri}$lstsq_one(error)
        if (error) return
        #: endfor

    end subroutine test_least_squares

    !> Simple polynomial fit
    #:for rk,rt,ri in REAL_KINDS_TYPES
    subroutine test_${ri}$lstsq_one(error)
        logical, intent(out) :: error

        type(la_state) :: state
        integer(ilp) :: rank

        !> Example scattered data
        ${rt}$, parameter :: x(*)  = real([1.0, 2.5, 3.5, 4.0, 5.0, 7.0, 8.5], ${rk}$)
        ${rt}$, parameter :: y(*)  = real([0.3, 1.1, 1.5, 2.0, 3.2, 6.6, 8.6], ${rk}$)
        ${rt}$, parameter :: ab(*) = real([0.20925829,  0.12013861], ${rk}$)

        ${rt}$ :: M(size(x),2),p(2)

        ! Coefficient matrix for polynomial y = a + b*x**2
        M(:,1) = x**0
        M(:,2) = x**2

        ! Find polynomial
        p = lstsq(M,y,rank=rank,err=state)

        print *, '${rt}$: p = ',p

        error = state%error() .or. .not.all(abs(p-ab)<1.0e-6_${rk}$) .or. rank/=2

    end subroutine test_${ri}$lstsq_one
    #:endfor

end module test_linalg_least_squares


