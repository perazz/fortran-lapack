#:mute

#! Real kinds to be considered during templating
#:set REAL_KINDS       = ["sp", "dp", "qp"]
#:set REAL_INITIALS    = ["s","d","q"]
#:set REAL_TYPES       = ["real({})".format(k) for k in REAL_KINDS]
#:set REAL_KINDS_TYPES = list(zip(REAL_KINDS, REAL_TYPES, REAL_INITIALS))

#! Complex kinds to be considered during templating
#:set CMPL_INITIALS    = ["c","z","w"]
#:set CMPL_TYPES       = ["complex({})".format(k) for k in REAL_KINDS]
#:set CMPL_KINDS_TYPES = list(zip(REAL_KINDS, CMPL_TYPES, CMPL_INITIALS))

#! All kinds to be considered during templating
#:set ALL_KINDS_TYPES  = list(zip(REAL_KINDS+REAL_KINDS,REAL_TYPES+CMPL_TYPES,REAL_INITIALS+CMPL_INITIALS))

#:set MAXRANK = 7

#:set RANK_SUFFIX      = ["_one","_multiple"]
#:set RANK_SYMBOL      = [":",":,:"]
#:set RANK_EMPTY       = ["0","0,0"]
#:set ALL_RANKS        = list(zip(RANK_SYMBOL,RANK_SUFFIX,RANK_EMPTY))

#! Switches for 2 function interfaces: non-pure (with error output); pure (no error output)
#:set FUNCTION_PREFIX     = ["pure ",""]
#:set FUNCTION_SUFFIX     = ["","_errhandle"]
#:set FUNCTION_ERR_ARG    = ["",",err"]
#:set FUNCTION_HAS_ERR    = [False,True]
#:set FUNCTION_INTERFACES = list(zip(FUNCTION_PREFIX,FUNCTION_SUFFIX,FUNCTION_ERR_ARG,FUNCTION_HAS_ERR))

#! Joins stripped lines with given character string
#!
#! Args:
#!   txt (str): Text to process
#!   joinstr (str): String to use as connector
#!   prefix (str): String to add as prefix before the joined text
#!   suffix (str): String to add as suffix after the joined text
#!
#! Returns:
#!   Lines stripped and joined with the given string.
#!
#:def join_lines(txt, joinstr, prefix="", suffix="")
${prefix + joinstr.join([line.strip() for line in txt.split("\n")]) + suffix}$
#:enddef

#! Generates an array rank suffix.
#!
#! Args:
#!     rank (int): Rank of the variable
#!
#! Returns:
#!     Array rank suffix string (e.g. (:,:) if rank = 2)
#!
#:def ranksuffix(rank)
#{if rank > 0}#(${":" + ",:" * (rank - 1)}$)#{endif}#
#:enddef

#! Generates an empty array rank suffix.
#!
#! Args:
#!     rank (int): Rank of the variable
#!
#! Returns:
#!     Empty array rank suffix string (e.g. (0,0) if rank = 2)
#!
#:def emptyranksuffix(rank)
#{if rank > 0}#(${"0" + ",0" * (rank - 1)}$)#{endif}#
#:enddef

#! Generates an array rank suffix with a fixed integer size for all dimensions.
#!
#! Args:
#!     rank (int): Rank of the variable
#!     size (int): Size along each dimension
#!
#! Returns:
#!     Array rank suffix string (e.g. (4,4,4) if rank = 3 and size = 4)
#!
#:def fixedranksuffix(rank,size)
#{if rank > 0}#(${str(size) + (","+str(size)) * (rank - 1)}$)#{endif}#
#:enddef

#! Brace enclosed, comma separated Fortran expressions for a reduced shape.
#!
#! Rank of the original variable will be reduced by one. The routine generates
#! for each dimension a Fortan expression using merge(), which calculates the
#! size of the array for that dimension.
#!
#! Args:
#!   varname (str): Name of the variable to be used as origin
#!   origrank (int): Rank of the original variable
#!   idim (int): Index of the reduced dimension
#!
#! Returns:
#!   Shape expression enclosed in braces, so that it can be used as suffix to
#!   define array shapes in declarations.
#!
#:def reduced_shape(varname, origrank, idim)
  #:assert origrank > 0
  #:if origrank > 1
    #:call join_lines(joinstr=", ", prefix="(", suffix=")")
      #:for i in range(1, origrank)
        merge(size(${varname}$, ${i}$), size(${varname}$, ${i + 1}$), mask=${i}$<${idim}$)
      #:endfor
    #:endcall
  #:endif
#:enddef


#! Generates a routine name from a generic name, rank, type and kind
#!
#! Args:
#!   gname (str): Generic name
#!   rank (integer): Rank if exist
#!   type (str): Type of the input
#!   kind (str): kind of inputs variable
#!   suffix (str): other identifier (could be used for output type/kind)
#!
#! Returns:
#!   A string with a new name
#!
#:def rname(gname, rank, type, kind, suffix='')
  $:"{0}_{1}_{2}{3}_{2}{3}".format(gname, rank, type[0], kind) if suffix == '' else "{0}_{1}_{2}{3}_{4}".format(gname, rank, type[0], kind, suffix)
#:enddef


#! Generates an array rank suffix for subarrays reducing the dimension
#!
#! Args:
#!   rank (int): Rank of the original variable
#!   selectors (array): Dimension and name of the variable(s)
#!
#! Returns:
#!   Array rank suffix string enclosed in braces
#!
#! E.g.,
#!   select_subarray(5 , [(4, 'i'), (5, 'j')])}$
#!   -> (:, :, :, i, j)
#!
#:def select_subarray(rank, selectors)
  #:assert rank > 0
  #:set seldict = dict(selectors)
  #:call join_lines(joinstr=", ", prefix="(", suffix=")")
    #:for i in range(1, rank + 1)
      $:seldict.get(i, ":")
    #:endfor
  #:endcall
#:enddef

#!
#! Generates an array rank suffix for subarrays along a dimension
#!
#! Args:
#!   varname (str): Name of the variable to be used as origin
#!   rank (int): Rank of the original variable
#!   dim (int): Dimension of the variable
#!
#! Returns:
#!   Array rank suffix string enclosed in braces
#!
#! E.g.,
#!  select_subvector('j', 5, 2)
#!   -> (j1, :, j3, j4, j5)
#!
#! Used, e.g., in
#!  stdlib_stats_median.fypp
#!
#:def select_subvector(varname, rank, idim)
  #:assert rank > 0
  #:call join_lines(joinstr=", ", prefix="(", suffix=")")
    #:for i in range(1, idim)
      ${varname}$${i}$
    #:endfor
    :
    #:for i in range(idim + 1, rank + 1)
      ${varname}$${i}$
    #:endfor
  #:endcall
#:enddef

#!
#! Generates an array rank suffix for arrays
#!
#! Args:
#!   varname (str): Name of the variable to be used as origin
#!   rank (int): Rank of the original array variable
#!   idim (int): Dimension of the variable dropped
#!
#! Returns:
#!   Array rank suffix string enclosed in braces
#!
#! E.g.,
#!  reduce_subvector('j', 5, 2)
#!   -> (j1, j3, j4, j5)
#!
#! Used, e.g., in
#!  stdlib_stats_median.fypp
#!
#:def reduce_subvector(varname, rank, idim)
  #:assert rank > 0
  #:if rank > 1
    #:call join_lines(joinstr=", ", prefix="(", suffix=")")
      #:for i in range(1, idim)
        ${varname}$${i}$
      #:endfor
      #:for i in range(idim + 1, rank + 1)
        ${varname}$${i}$
      #:endfor
    #:endcall
  #:endif
#:enddef

#:endmute
