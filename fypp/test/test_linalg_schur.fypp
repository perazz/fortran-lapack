#:include "common.fypp"
! Test Schur form
module test_linalg_schur
    use stdlib_linalg_interface

    implicit none (type,external)

    contains

    !> SVD tests
    subroutine test_schur(error)
        logical, intent(out) :: error

        real :: t0,t1

        call cpu_time(t0)

        #:for rk,rt,ri in ALL_KINDS_TYPES
        call test_schur_api_${ri}$(error)
        if (error) return
        #:if rt.startswith('real')
        call test_schur_${ri}$(error)
        #:endif
        #: endfor

        call cpu_time(t1)

        print 1, 1000*(t1-t0), merge('SUCCESS','ERROR  ',.not.error)

        1 format('Schur tests completed in ',f9.4,' milliseconds, result=',a)

    end subroutine test_schur

    !> QR factorization of a random matrix
    #:for rk,rt,ri in ALL_KINDS_TYPES
    subroutine test_schur_api_${ri}$(error)
        logical,intent(out) :: error

        integer(ilp), parameter :: n   = 15_ilp
        integer(ilp) :: lwork
        real(${rk}$), parameter :: tol = 10*sqrt(epsilon(0.0_${rk}$))
        complex(${rk}$) :: eigs(n)
        ${rt}$, dimension(n,n) :: a,t,z
        ${rt}$, allocatable :: storage(:)
        #:if 'complex' in rt
        real(${rk}$) :: rea(n,n),ima(n,n)
        #:endif
        type(linalg_state) :: err
        
        #:if 'complex' in rt
        call random_number(rea)
        call random_number(ima)
        a = cmplx(rea,ima,kind=${rk}$)
        #:else
        call random_number(a)
        #:endif
        
        ! Test simple API
        call schur(a,t,err=err)
        error = err%error(); if (error) print err%print(); if (error) return
        
        ! Test output transformation matrix
        call schur(a,t,z,err=err)
        error = err%error(); if (error) print err%print(); if (error) return

        ! Test output eigenvalues
        call schur(a,t,eigvals=eigs,err=err)
        error = err%error(); if (error) print err%print(); if (error) return
        
        ! Test storage query
        call schur_space(a,lwork,err=err)
        error = err%error(); if (error) print err%print(); if (error) return
        
        ! Test with user-defined storage
        allocate(storage(lwork))        
        call schur(a,t,eigvals=eigs,storage=storage,err=err)
        error = err%error(); if (error) print err%print(); if (error) return        
        
    end subroutine test_schur_api_${ri}$
    
    #:if rt.startswith('real')
    subroutine test_schur_${ri}$(error)
        logical,intent(out) :: error

        integer(ilp), parameter :: n = 3_ilp
        real(${rk}$), parameter :: rtol = 1.0e-4_${rk}$
        real(${rk}$), parameter :: eps  = sqrt(epsilon(0.0_${rk}$))
        ${rt}$, dimension(n,n) :: a,t,z
        #:if 'complex' in rt
        real(${rk}$), dimension(n,n) :: a_re,a_im
        #:endif        
        type(linalg_state) :: err

        #:if 'complex' in rt
        call random_number(a_re)
        call random_number(a_im)
        a = cmplx(a_re,a_im,kind=${rk}$)
        #:else
        call random_number(a)
        #:endif

        ! Run schur
        call schur(a,t,z,err=err)
        error = err%error(); if (error) print err%print(); if (error) return        
        
        error = .not.(all(abs(a-matmul(matmul(z,t),transpose(z)))<=max(rtol*abs(z),eps)))
        if (error) print *, 'invalid matmul ${rt}$'
        if (error) print *, a-matmul(matmul(z,t),transpose(z))
                
    end subroutine test_schur_${ri}$
    
    #:endif
    
    #:endfor



end module test_linalg_schur


