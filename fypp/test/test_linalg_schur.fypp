#:include "common.fypp"
! Test Schur form
module test_linalg_schur
    use stdlib_linalg_interface

    implicit none (type,external)

    contains

    !> SVD tests
    subroutine test_schur(error)
        logical, intent(out) :: error

        real :: t0,t1

        call cpu_time(t0)

        #:for rk,rt,ri in ALL_KINDS_TYPES
        call test_qr_random_${ri}$(error)
        if (error) return
        #: endfor

        call cpu_time(t1)

        print 1, 1000*(t1-t0), merge('SUCCESS','ERROR  ',.not.error)

        1 format('Schur tests completed in ',f9.4,' milliseconds, result=',a)

    end subroutine test_schur

    !> QR factorization of a random matrix
    #:for rk,rt,ri in ALL_KINDS_TYPES
    subroutine test_qr_random_${ri}$(error)
        logical,intent(out) :: error

        integer(ilp), parameter :: n   = 15_ilp
        real(${rk}$), parameter :: tol = 10*sqrt(epsilon(0.0_${rk}$))
        ${rt}$ :: a(n,n),t(n,n)
        #:if 'complex' in rt
        real(${rk}$) :: rea(n,n),ima(n,n)
        #:endif
        integer(ilp) :: lwork
        ${rt}$, allocatable :: work(:)
        type(linalg_state) :: err
        
        #:if 'complex' in rt
        call random_number(rea)
        call random_number(ima)
        a = cmplx(rea,ima,kind=${rk}$)
        #:else
        call random_number(a)
        #:endif
        
        ! 1) QR factorization with full matrices
        call schur(a,t,err=err)
        
        print *, err%print() 
        
        error = err%error()
        
        ! Check solution
        if (error) return     
        
    end subroutine test_qr_random_${ri}$

    #:endfor


end module test_linalg_schur


